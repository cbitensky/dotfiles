xkb_keymap {
xkb_keycodes "k" {
    minimum = 8;
    maximum = 255;
     <ESC> = 9;
    <AE01> = 10;
    <AE02> = 11;
    <AE03> = 12;
    <AE04> = 13;
    <AE05> = 14;
    <AE06> = 15;
    <AE07> = 16;
    <AE08> = 17;
    <AE09> = 18;
    <AE10> = 19;
    <AE11> = 20;
    <AE12> = 21;
    <BKSP> = 22;
     <TAB> = 23;
    <AD01> = 24;
    <AD02> = 25;
    <AD03> = 26;
    <AD04> = 27;
    <AD05> = 28;
    <AD06> = 29;
    <AD07> = 30;
    <AD08> = 31;
    <AD09> = 32;
    <AD10> = 33;
    <AD11> = 34;
    <AD12> = 35;
    <RTRN> = 36;
    <LCTL> = 37;
    <AC01> = 38;
    <AC02> = 39;
    <AC03> = 40;
    <AC04> = 41;
    <AC05> = 42;
    <AC06> = 43;
    <AC07> = 44;
    <AC08> = 45;
    <AC09> = 46;
    <AC10> = 47;
    <AC11> = 48;
    <TLDE> = 49;
    <LFSH> = 50;
    <BKSL> = 51;
    <AB01> = 52;
    <AB02> = 53;
    <AB03> = 54;
    <AB04> = 55;
    <AB05> = 56;
    <AB06> = 57;
    <AB07> = 58;
    <AB08> = 59;
    <AB09> = 60;
    <AB10> = 61;
    <RTSH> = 62;
    <KPMU> = 63;
    <LALT> = 64;
    <SPCE> = 65;
    <CAPS> = 66;
    <FK01> = 67;
    <FK02> = 68;
    <FK03> = 69;
    <FK04> = 70;
    <FK05> = 71;
    <FK06> = 72;
    <FK07> = 73;
    <FK08> = 74;
    <FK09> = 75;
    <FK10> = 76;
    <NMLK> = 77;
    <SCLK> = 78;
     <KP7> = 79;
     <KP8> = 80;
     <KP9> = 81;
    <KPSU> = 82;
     <KP4> = 83;
     <KP5> = 84;
     <KP6> = 85;
    <KPAD> = 86;
     <KP1> = 87;
     <KP2> = 88;
     <KP3> = 89;
     <KP0> = 90;
    <KPDL> = 91;
    <FK11> = 95;
    <FK12> = 96;
    <KPEN> = 104;
    <RCTL> = 105;
    <KPDV> = 106;
    <PRSC> = 107;
//    <RALT> = 108;
    <RALT> = 134;
    <HOME> = 110;
      <UP> = 111;
    <PGUP> = 112;
    <LEFT> = 113;
    <RGHT> = 114;
     <END> = 115;
    <DOWN> = 116;
    <PGDN> = 117;
     <INS> = 118;
    <DELE> = 119;
    <MUTE> = 121;
    <VOL-> = 122;
    <VOL+> = 123;
    <POWR> = 124;
    <PAUS> = 127;
    <LWIN> = 133;
//    <RWIN> = 134;
    <RWIN> = 108;
    <MENU> = 135;
    <FRNT> = 140;
    <FIND> = 144;
    <I150> = 150;
    <I155> = 155;
    <I156> = 156;
    <I158> = 158;
    <I159> = 159;
    <I163> = 163;
    <I164> = 164;
    <I165> = 165;
    <I166> = 166;
    <I171> = 171;
    <I172> = 172;
    <I173> = 173;
    <I180> = 180;
    <I217> = 217;
    <I232> = 232;
    <I233> = 233;
    <I235> = 235;
    <I246> = 246;

    indicator 1 = "Caps Lock";
    indicator 2 = "Num Lock";
    indicator 3 = "Scroll Lock";
    virtual indicator 4 = "Group 2";
};

xkb_types "k" {

    virtual_modifiers Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };
    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    type "ALPHABETIC" {
        modifiers= Shift+Lock;
        map[Shift]= Level2;
        map[Lock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    type "KEYPAD" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
    };
    type "SHIFT+ALT" {
        modifiers= Shift+Alt;
        map[Shift+Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift+Alt";
    };
    type "PC_CONTROL_LEVEL2" {
        modifiers= Control;
        map[Control]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Control";
    };
    type "PC_LCONTROL_LEVEL2" {
        modifiers= LControl;
        map[LControl]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "LControl";
    };
    type "PC_RCONTROL_LEVEL2" {
        modifiers= RControl;
        map[RControl]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "RControl";
    };
    type "PC_ALT_LEVEL2" {
        modifiers= Alt;
        map[Alt]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Alt";
    };
    type "CTRL+ALT" {
        modifiers = Control+Alt+Shift+LevelThree;
        map[None] = Level1;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Control+Alt] = Level5;
        preserve[Shift] = Shift;
        preserve[Shift+LevelThree] = Shift;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Ctrl+Alt";
    };
    type "L2" {
        modifiers= LevelThree;
        map[LevelThree]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Alt";
    };
    type "L4" {
        modifiers= Shift+LevelThree;
        map[Shift]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
    type "L4A" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level4;
        map[Shift+Lock+LevelThree]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
    type "L4SA" {
        modifiers= Shift+Lock+LevelThree;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        map[Lock+LevelThree]= Level3;
        preserve[Lock+LevelThree]= Lock;
        map[Shift+Lock+LevelThree]= Level4;
        preserve[Shift+Lock+LevelThree]= Lock;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
    };
};


xkb_compatibility "k" {

    virtual_modifiers Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;
    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_R+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Scroll_Lock+AnyOf(all) {
        virtualModifier= ScrollLock;
        action= LockMods(modifiers=modMapMods);
    };
    interpret ISO_Level3_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Next_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=+1);
    };
    interpret ISO_Prev_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=-1);
    };
    interpret ISO_First_Group+AnyOfOrNone(all) {
        action= LockGroup(group=1);
    };
    interpret ISO_Last_Group+AnyOfOrNone(all) {
        action= LockGroup(group=2);
    };
//    interpret Terminate_Server+AnyOfOrNone(all) {
//        action= Terminate();
//    };
    interpret Alt_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
//    interpret Super_L+AnyOfOrNone(all) {
//        action= SetMods(modifiers=Super,clearLocks);
//    };
//    interpret Super_R+AnyOfOrNone(all) {
//        action= SetMods(modifiers=Super,clearLocks);
//    };
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret XF86Switch_VT_1+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=1,!same);
    };
    interpret XF86Switch_VT_2+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=2,!same);
    };
    interpret XF86Switch_VT_3+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=3,!same);
    };
    interpret XF86Switch_VT_4+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=4,!same);
    };
    interpret XF86Switch_VT_5+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=5,!same);
    };
    interpret XF86Switch_VT_6+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=6,!same);
    };
    interpret XF86Switch_VT_7+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=7,!same);
    };
    interpret XF86Switch_VT_8+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=8,!same);
    };
    interpret XF86Switch_VT_9+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=9,!same);
    };
    interpret XF86Switch_VT_10+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=10,!same);
    };
    interpret XF86Switch_VT_11+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=11,!same);
    };
    interpret XF86Switch_VT_12+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=12,!same);
    };
//    interpret XF86LogGrabInfo+AnyOfOrNone(all) {
//        repeat= True;
//        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
//    };
//    interpret XF86LogWindowTree+AnyOfOrNone(all) {
//        repeat= True;
//        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
//    };
    interpret XF86Next_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret XF86Prev_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret Caps_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
//    indicator "Caps Lock" {
//        !allowExplicit;
//        whichModState= locked;
//        modifiers= Lock;
//    };
//    indicator "Num Lock" {
//        !allowExplicit;
//        whichModState= locked;
//    };
//    indicator "Scroll Lock" {
//        whichModState= locked;
//        modifiers= ScrollLock;
//    };
//    indicator "Group 2" {
//        !allowExplicit;
//        groups= 0xfe;
//    };
};

xkb_symbols "k" {

name[group1]="Latin";
name[group2]="Cyrillic";
name[group2]="Hebrew";

key <FK01> { type="CTRL+ALT", [ F1 , F1 , F1 , F1 , XF86Switch_VT_1  ] };
key <FK02> { type="CTRL+ALT", [ F2 , F2 , F2 , F2 , XF86Switch_VT_2  ] };
key <FK03> { type="CTRL+ALT", [ F3 , F3 , F3 , F3 , XF86Switch_VT_3  ] };
key <FK04> { type="CTRL+ALT", [ F4 , F4 , F4 , F4 , XF86Switch_VT_4  ] };
key <FK05> { type="CTRL+ALT", [ F5 , F5 , F5 , F5 , XF86Switch_VT_5  ] };
key <FK06> { type="CTRL+ALT", [ F6 , F6 , F6 , F6 , XF86Switch_VT_6  ] };
key <FK07> { type="CTRL+ALT", [ F7 , F7 , F7 , F7 , XF86Switch_VT_7  ] };
key <FK08> { type="CTRL+ALT", [ F8 , F8 , F8 , F8 , XF86Switch_VT_8  ] };
key <FK09> { type="CTRL+ALT", [ F9 , F9 , F9 , F9 , XF86Switch_VT_9  ] };
key <FK10> { type="CTRL+ALT", [ F10, F10, F10, F10, XF86Switch_VT_10 ] };
key <FK11> { type="CTRL+ALT", [ F11, F11, F11, F11, XF86Switch_VT_11 ] };
key <FK12> { type="CTRL+ALT", [ F12, F12, F12, F12, XF86Switch_VT_12 ] };

key  <TAB> { [ Tab, ISO_Left_Tab ] };
key <RALT> { type="ONE_LEVEL", [ ISO_Level3_Shift ] };
key <PRSC> { type="PC_ALT_LEVEL2", [ Print, Sys_Req ] };
key <PAUS> { type="PC_CONTROL_LEVEL2", [ Pause, Break ] };

key <SCLK> { [ Scroll_Lock    ] };
key  <ESC> { [ Escape         ] };
key <BKSP> { [ BackSpace      ] };
key <RTRN> { [ Return         ] };
key <CAPS> { [ none ] };
key <LFSH> { [ Shift_L        ] };
key <RTSH> { [ Shift_R        ] };
key <LCTL> { [ Control_L      ] };
key <LWIN> { [ Super_L        ] };
key <LALT> { [ Alt_L          ] };
key <RWIN> { [ Super_R        ] };
key <MENU> { [ Menu           ] };
key <RCTL> { [ Control_R      ] };


key  <INS> { [ Insert ] };
key <HOME> { [   Home ] };
key <PGUP> { [  Prior ] };
key <DELE> { [ Delete ] };
key  <END> { [    End ] };
key <PGDN> { [   Next ] };

key   <UP> { [     Up ] };
key <LEFT> { type="L2", [   Left, U200F ] };
key <RGHT> { type="L2", [  Right, U200E ] };
key <DOWN> { [   Down ] };

key <TLDE> { type="L4", [ quotedbl, apostrophe, U0301, currency ] };
key <AE01> { type="L4", [ exclam, rightsinglequotemark, 1, cent     ] };
key <AE02> { type="L4", [ question, enfilledcircbullet, 2, sterling ] };
key <AE03> { type="L4", [ emdash, numbersign,           3, EuroSign ] };
key <AE04> { type="L4", [ comma,  dollar,               4, U20B4 ] };
key <AE05> { type="L4", [ semicolon, percent,           5, U2030 ] };
key <AE06> { type="L4", [ colon, degree,                6, U20AA ] };
key <AE07> { type="L4", [ period, ampersand,            7 ] };
key <AE08> { type="L4", [ minus, asterisk,              8, U2217 ] };
key <AE09> { type="L4", [ parenleft, bracketleft,       9, U27E8 ] };
key <AE10> { type="L4", [ parenright, bracketright,     0, U27E9 ] };
key <AE11> { type="L4", [ leftdoublequotemark, leftsinglequotemark, section ], [ guillemotleft, doublelowquotemark, section ] };
key <AE12> { type="L4", [ rightdoublequotemark, rightsinglequotemark ], [ guillemotright, leftdoublequotemark ] };
key <BKSL> { type="L4", [ backslash, bar ] };

key <AD01> { type="L4SA", [ q, Q, ellipsis, U22EE ], [ Cyrillic_shorti, Cyrillic_SHORTI, ellipsis, U22EE ], [ U05F4, U05C2 ] };
key <AD02> { type="L4SA", [ w, W ], [ Cyrillic_tse, Cyrillic_TSE ], [ U05F3, U05C1 ] };
key <AD03> { type="L4SA", [ e, E, less,    lessthanequal    ], [ Cyrillic_u,  Cyrillic_U,  less,    U2A7D ], [ hebrew_qoph, U05B8 ] };
key <AD04> { type="L4SA", [ r, R, greater, greaterthanequal ], [ Cyrillic_ka, Cyrillic_KA, greater, U2A7E ], [ hebrew_resh, U05B3 ] };
key <AD05> { type="L4SA", [ t, T, U202F], [ Cyrillic_ie, Cyrillic_IE, U202F ], [ hebrew_aleph ] };
key <AD06> { type="L4SA", [ y, Y, digitspace ], [ Cyrillic_en, Cyrillic_EN, digitspace ], [ hebrew_tet, U05F0 ] };
key <AD07> { type="L4A",  [ u, U, udiaeresis, Udiaeresis ], [ Cyrillic_ghe, Cyrillic_GHE, Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ], [ hebrew_waw, U05B9 ] };
key <AD08> { type="L4SA", [ i, I, idiaeresis, Idiaeresis ], [ Cyrillic_sha, Cyrillic_SHA ], [ hebrew_finalnun ] };
key <AD09> { type[group1]="L4A", type[group2]="L4SA", [ o, O, odiaeresis, Odiaeresis ], [ Cyrillic_shcha, Cyrillic_SHCHA ], [ hebrew_finalmem ] };
key <AD10> { type="L4SA", [ p, P, Greek_pi ], [ Cyrillic_ze, Cyrillic_ZE, Greek_pi], [ hebrew_pe, U05B7 ] };
key <AD11> { type[group1]="L4", type[group2]="L4SA", [ asciicircum, registered, dagger, doubledagger ], [ Cyrillic_ha, Cyrillic_HA, dagger, doubledagger ] };
key <AD12> { type[group1]="L4", type[group2]="L4A" , [ asciitilde,  trademark ], [ Cyrillic_hardsign, Cyrillic_HARDSIGN, Ukrainian_yi, Ukrainian_YI ] };

key <AC01> { type[group1]="L4A",  type[group2]="L4SA", [ a, A, adiaeresis, Adiaeresis ], [ Cyrillic_ef, Cyrillic_EF, numerosign ], [ hebrew_shin, U05B0 ] };
key <AC02> { type[group1]="L4SA", type[group2]="L4A",  [ s, S, ssharp ], [ Cyrillic_yeru, Cyrillic_YERU, Ukrainian_i, Ukrainian_I ], [ hebrew_dalet, U05BC ] };
key <AC03> { type="L4SA", [ d, D, plus, plusminus ], [ Cyrillic_ve, Cyrillic_VE, plus, plusminus ], [ hebrew_gimel, U05B4 ] };
key <AC04> { type="L4SA", [ f, F, equal, approxeq ], [ Cyrillic_a,  Cyrillic_A,  equal, approxeq ], [ hebrew_kaph, U05F1 ] };
key <AC05> { type="L4SA", [ g, G, thinspace ], [ Cyrillic_pe, Cyrillic_PE, thinspace ], [ hebrew_ayin, U05F2 ] };
key <AC06> { type="L4SA", [ h, H, hyphen ], [ Cyrillic_er, Cyrillic_ER, hyphen ], [ hebrew_yod ] };
key <AC07> { type="L4SA", [ j, J, U2060], [ Cyrillic_o,  Cyrillic_O, U2060 ], [ hebrew_chet ] };
key <AC08> { type="L4SA", [ k, K ], [ Cyrillic_el, Cyrillic_EL ], [ hebrew_lamed ] };
key <AC09> { type="L4SA", [ l, L ], [ Cyrillic_de, Cyrillic_DE ], [ hebrew_finalkaph ] };
key <AC10> { type[group1]="L4", type[group2]="L4SA", [ slash, endash ], [ Cyrillic_zhe, Cyrillic_ZHE ], [ hebrew_finalpe ] };
key <AC11> { type[group1]="L4", type[group2]="L4A",  [ at, grave, ae, AE ], [ Cyrillic_e, Cyrillic_E, Ukrainian_ie, Ukrainian_IE ] };

key <AB01> { type="L4SA", [ z, Z, downarrow  ], [ Cyrillic_ya,  Cyrillic_YA,  downarrow ], [ hebrew_zain ] };
key <AB02> { type="L4SA", [ x, X, uparrow, ifonlyif ], [ Cyrillic_che, Cyrillic_CHE, uparrow, ifonlyif ], [ hebrew_samech, U05B6 ] };
key <AB03> { type="L4SA", [ c, C, leftarrow, U21D0 ], [ Cyrillic_es,  Cyrillic_ES,  leftarrow, U21D0 ], [ hebrew_bet, U05B1 ] };
key <AB04> { type="L4SA", [ v, V, rightarrow, implies ], [ Cyrillic_em,  Cyrillic_EM,  rightarrow, implies ], [ hebrew_he ] };
key <AB05> { type="L4SA", [ b, B, U200B ], [ Cyrillic_i,        Cyrillic_I,          U200B   ], [ hebrew_nun, U05C6 ] };
key <AB06> { type="L4SA", [ n, N, enspace ], [ Cyrillic_te,       Cyrillic_TE,       enspace ], [ hebrew_mem ] };
key <AB07> { type="L4SA", [ m, M, emspace, U266B ], [ Cyrillic_softsign, Cyrillic_SOFTSIGN, emspace, U266B ], [ hebrew_zade, U05B5, emspace, U266B ] };
key <AB08> { type[group1]="L4", type[group2]="L4SA", [ braceleft,  none, U2AFD], [ Cyrillic_be, Cyrillic_BE, U2AFD ], [ hebrew_taw ] };
key <AB09> { type[group1]="L4", type[group2]="L4SA", [ braceright, mu  , U2307], [ Cyrillic_yu, Cyrillic_YU, U2307 ], [ hebrew_finalzade ] };
key <AB10> { type="L4SA", [ underscore, Greek_DELTA, U2318], [ Cyrillic_io, Cyrillic_IO, U2318 ] };

key <SPCE> { type="L4", [ space, nobreakspace, U2423, U200F ] };

key <NMLK> { type="L4", [ equal, notequal ] };
key <KPDV> { type="L4", [ KP_Divide, division, U2215 ] };
key <KPMU> { type="L4", [ KP_Multiply, multiply, U22C5, U2062] };
key <KPSU> { type="L4", [ KP_Subtract, U207B, U2212     ] };
key <KPAD> { type="L4", [ KP_Add     , U207A ] };
key  <KP7> { type="L4", [ KP_7, sevensuperior ] };
key  <KP8> { type="L4", [ KP_8, eightsuperior ] };
key  <KP9> { type="L4", [ KP_9, ninesuperior  ] };
key  <KP4> { type="L4", [ KP_4, foursuperior  ] };
key  <KP5> { type="L4", [ KP_5, fivesuperior  ] };
key  <KP6> { type="L4", [ KP_6, sixsuperior   ] };
key  <KP1> { type="L4", [ KP_1, onesuperior   ] };
key  <KP2> { type="L4", [ KP_2, twosuperior   ] };
key  <KP3> { type="L4", [ KP_3, threesuperior ] };
key  <KP0> { type="L4", [ KP_0, zerosuperior  ] };
key <KPDL> { type="L4", [ KP_Decimal, comma, minutes, seconds ] };
key <KPEN> { [ KP_Enter ] };

key <MUTE> { [ XF86AudioMute         ] };
key <VOL-> { [ XF86AudioLowerVolume  ] };
key <VOL+> { [ XF86AudioRaiseVolume  ] };
key <POWR> { [ XF86PowerOff          ] };
key <I150> { [ XF86Sleep             ] };
key <I156> { [ XF86Launch1           ] };
key <I163> { [ XF86Mail              ] };
key <I171> { [ XF86AudioNext         ] };
key <I172> { [ XF86AudioPlay, XF86AudioPause ] };
key <I173> { [ XF86AudioPrev         ] };
key <I180> { [ XF86HomePage          ] };
key <I232> { [ XF86MonBrightnessDown ] };
key <I233> { [ XF86MonBrightnessUp   ] };
key <I235> { [ XF86Display           ] };
key <I246> { [ XF86WLAN              ] };

modifier_map Control { <LCTL> };
modifier_map Shift   { <LFSH> };
modifier_map Shift   { <RTSH> };
modifier_map Control { <CAPS> };
modifier_map Mod1    { <LALT> };
modifier_map Mod2    { <NMLK> };
modifier_map Mod3    { <SCLK> };
modifier_map Mod4    { <LWIN> };
modifier_map Mod4    { <RWIN> };
modifier_map Mod5    { <RALT> };

};

xkb_geometry "pc(pc104)" {

    width=       470;
    height=      180;

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

    baseColor=   "white";
    labelColor=  "black";
    xfont=       "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
    description= "Generic 104";

    shape "NORM" {
        corner= 1,
        { [  18,  18 ] },
        { [   2,   1 ], [  16,  16 ] }
    };
    shape "BKSP" {
        corner= 1,
        { [  38,  18 ] },
        { [   2,   1 ], [  36,  16 ] }
    };
    shape "TABK" {
        corner= 1,
        { [  28,  18 ] },
        { [   2,   1 ], [  26,  16 ] }
    };
    shape "BKSL" {
        corner= 1,
        { [  28,  18 ] },
        { [   2,   1 ], [  26,  16 ] }
    };
    shape "RTRN" {
        corner= 1,
        { [  42,  18 ] },
        { [   2,   1 ], [  40,  16 ] }
    };
    shape "CAPS" {
        corner= 1,
        { [  33,  18 ] },
        { [   2,   1 ], [  31,  16 ] }
    };
    shape "LFSH" {
        corner= 1,
        { [  42,  18 ] },
        { [   2,   1 ], [  40,  16 ] }
    };
    shape "RTSH" {
        corner= 1,
        { [  52,  18 ] },
        { [   2,   1 ], [  50,  16 ] }
    };
    shape "MODK" {
        corner= 1,
        { [  27,  18 ] },
        { [   2,   1 ], [  25,  16 ] }
    };
    shape "SMOD" {
        corner= 1,
        { [  23,  18 ] },
        { [   2,   1 ], [  21,  16 ] }
    };
    shape "SPCE" {
        corner= 1,
        { [ 113,  18 ] },
        { [   2,   1 ], [ 111,  16 ] }
    };
    shape "KP0" {
        corner= 1,
        { [  37,  18 ] },
        { [   2,   1 ], [  35,  16 ] }
    };
    shape "KPAD" {
        corner= 1,
        { [  18,  37 ] },
        { [   2,   1 ], [  16,  35 ] }
    };
    shape "LEDS" { { [  75,  20 ] } };
    shape "LED" { { [   5,   1 ] } };
    section "Function" {
        key.color= "grey20";
        priority=  7;
        top=       22;
        left=      19;
        width=     351;
        height=    19;
        row {
            top=  1;
            left= 1;
            keys {
                {  <ESC>, "NORM",   1 },
                { <FK01>, "NORM",  20, color="white" },
                { <FK02>, "NORM",   1, color="white" },
                { <FK03>, "NORM",   1, color="white" },
                { <FK04>, "NORM",   1, color="white" },
                { <FK05>, "NORM",  11, color="white" },
                { <FK06>, "NORM",   1, color="white" },
                { <FK07>, "NORM",   1, color="white" },
                { <FK08>, "NORM",   1, color="white" },
                { <FK09>, "NORM",  11, color="white" },
                { <FK10>, "NORM",   1, color="white" },
                { <FK11>, "NORM",   1, color="white" },
                { <FK12>, "NORM",   1, color="white" },
                { <PRSC>, "NORM",   8, color="white" },
                { <SCLK>, "NORM",   1, color="white" },
                { <PAUS>, "NORM",   1, color="white" }
            };
        };
    }; // End of "Function" section

    section "Alpha" {
        key.color= "white";
        priority=  8;
        top=       61;
        left=      19;
        width=     287;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                { <TLDE>, "NORM",   1 }, { <AE01>, "NORM",   1 },
                { <AE02>, "NORM",   1 }, { <AE03>, "NORM",   1 },
                { <AE04>, "NORM",   1 }, { <AE05>, "NORM",   1 },
                { <AE06>, "NORM",   1 }, { <AE07>, "NORM",   1 },
                { <AE08>, "NORM",   1 }, { <AE09>, "NORM",   1 },
                { <AE10>, "NORM",   1 }, { <AE11>, "NORM",   1 },
                { <AE12>, "NORM",   1 },
                { <BKSP>, "BKSP",   1, color="grey20" }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                {  <TAB>, "TABK",   1, color="grey20" },
                { <AD01>, "NORM",   1 }, { <AD02>, "NORM",   1 },
                { <AD03>, "NORM",   1 }, { <AD04>, "NORM",   1 },
                { <AD05>, "NORM",   1 }, { <AD06>, "NORM",   1 },
                { <AD07>, "NORM",   1 }, { <AD08>, "NORM",   1 },
                { <AD09>, "NORM",   1 }, { <AD10>, "NORM",   1 },
                { <AD11>, "NORM",   1 }, { <AD12>, "NORM",   1 },
                { <BKSL>, "BKSL",   1 }
            };
        };
        row {
            top=  39;
            left= 1;
            keys {
                { <CAPS>, "CAPS",   1, color="grey20" },
                { <AC01>, "NORM",   1 }, { <AC02>, "NORM",   1 },
                { <AC03>, "NORM",   1 }, { <AC04>, "NORM",   1 },
                { <AC05>, "NORM",   1 }, { <AC06>, "NORM",   1 },
                { <AC07>, "NORM",   1 }, { <AC08>, "NORM",   1 },
                { <AC09>, "NORM",   1 }, { <AC10>, "NORM",   1 },
                { <AC11>, "NORM",   1 },
                { <RTRN>, "RTRN",   1, color="grey20" }
            };
        };
        row {
            top=  58;
            left= 1;
            keys {
                { <LFSH>, "LFSH",   1, color="grey20" },
                { <AB01>, "NORM",   1 }, { <AB02>, "NORM",   1 },
                { <AB03>, "NORM",   1 }, { <AB04>, "NORM",   1 },
                { <AB05>, "NORM",   1 }, { <AB06>, "NORM",   1 },
                { <AB07>, "NORM",   1 }, { <AB08>, "NORM",   1 },
                { <AB09>, "NORM",   1 }, { <AB10>, "NORM",   1 },
                { <RTSH>, "RTSH",   1, color="grey20" }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
                { <LCTL>, "MODK",   1, color="grey20" },
                { <LWIN>, "SMOD",   1, color="grey20" },
                { <LALT>, "SMOD",   1, color="grey20" },
                { <SPCE>, "SPCE",   1 },
                { <RALT>, "SMOD",   1, color="grey20" },
                { <RWIN>, "SMOD",   1, color="grey20" },
                { <MENU>, "SMOD",   1, color="grey20" },
                { <RCTL>, "SMOD",   1, color="grey20" }
            };
        };
    }; // End of "Alpha" section

    section "Editing" {
        key.color= "grey20";
        priority=  9;
        top=       61;
        left=      312;
        width=     58;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                {  <INS>, "NORM",   1 }, { <HOME>, "NORM",   1 },
                { <PGUP>, "NORM",   1 }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                { <DELE>, "NORM",   1 }, {  <END>, "NORM",   1 },
                { <PGDN>, "NORM",   1 }
            };
        };
        row {
            top=  58;
            left= 20;
            keys {
                {   <UP>, "NORM",   1 }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
                { <LEFT>, "NORM",   1 }, { <DOWN>, "NORM",   1 },
                { <RGHT>, "NORM",   1 }
            };
        };
    }; // End of "Editing" section

    section "Keypad" {
        key.color= "grey20";
        priority=  10;
        top=       61;
        left=      376;
        width=     77;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                { <NMLK>, "NORM",   1 }, { <KPDV>, "NORM",   1 },
                { <KPMU>, "NORM",   1 }, { <KPSU>, "NORM",   1 }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                {  <KP7>, "NORM",   1, color="white" },
                {  <KP8>, "NORM",   1, color="white" },
                {  <KP9>, "NORM",   1, color="white" },
                { <KPAD>, "KPAD",   1 }
            };
        };
        row {
            top=  39;
            left= 1;
            keys {
                {  <KP4>, "NORM",   1, color="white" },
                {  <KP5>, "NORM",   1, color="white" },
                {  <KP6>, "NORM",   1, color="white" }
            };
        };
        row {
            top=  58;
            left= 1;
            keys {
                {  <KP1>, "NORM",   1, color="white" },
                {  <KP2>, "NORM",   1, color="white" },
                {  <KP3>, "NORM",   1, color="white" },
                { <KPEN>, "KPAD",   1 }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
                {  <KP0>, "KP0",   1, color="white" },
                { <KPDL>, "NORM",   1, color="white" }
            };
        };
    }; // End of "Keypad" section

    solid "LedPanel" {
        top=      22;
        left=     377;
        priority= 0;
        color= "grey10";
        shape= "LEDS";
    };
    indicator "Num Lock" {
        top=      37;
        left=     382;
        priority= 1;
        onColor= "green";
        offColor= "green30";
        shape= "LED";
    };
    indicator "Caps Lock" {
        top=      37;
        left=     407;
        priority= 2;
        onColor= "green";
        offColor= "green30";
        shape= "LED";
    };
    indicator "Scroll Lock" {
        top=      37;
        left=     433;
        priority= 3;
        onColor= "green";
        offColor= "green30";
        shape= "LED";
    };
    text "NumLockLabel" {
        top=      25;
        left=     378;
        priority= 4;
        width=  19.8;
        height=  10;
        XFont= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
        text=  "Num\nLock";
    };
    text "CapsLockLabel" {
        top=      25;
        left=     403;
        priority= 5;
        width=  26.4;
        height=  10;
        XFont= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
        text=  "Caps\nLock";
    };
    text "ScrollLockLabel" {
        top=      25;
        left=     428;
        priority= 6;
        width=  39.6;
        height=  10;
        XFont= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
        text=  "Scroll\nLock";
    };
};

};
