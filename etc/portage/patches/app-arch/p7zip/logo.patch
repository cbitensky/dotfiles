diff --git a/CPP/7zip/UI/Console/Main.cpp b/CPP/7zip/UI/Console/Main.cpp
index aa49e50..17f21dd 100644
--- a/CPP/7zip/UI/Console/Main.cpp
+++ b/CPP/7zip/UI/Console/Main.cpp
@@ -199,11 +199,11 @@ static void ShowCopyrightAndHelp(CStdOutStream *so, bool needHelp)
 {
   if (!so)
     return;
-  *so << kCopyrightString;
+  //*so << kCopyrightString;
   // *so << "# CPUs: " << (UInt64)NWindows::NSystem::GetNumberOfProcessors() << endl;
 
-  showP7zipInfo(so);
- 
+  //showP7zipInfo(so);
+
 
   if (needHelp)
     *so << kHelpString;
@@ -264,7 +264,7 @@ static int WarningsCheck(HRESULT result, const CCallbackConsoleBase &callback,
     bool showHeaders)
 {
   int exitCode = NExitCode::kSuccess;
-  
+
   if (callback.ScanErrors.Paths.Size() != 0)
   {
     if (se)
@@ -277,7 +277,7 @@ static int WarningsCheck(HRESULT result, const CCallbackConsoleBase &callback,
     }
     exitCode = NExitCode::kWarning;
   }
-  
+
   if (result != S_OK || errorInfo.ThereIsError())
   {
     if (se)
@@ -335,7 +335,7 @@ static int WarningsCheck(HRESULT result, const CCallbackConsoleBase &callback,
     }
     exitCode = NExitCode::kWarning;
   }
-  
+
   return exitCode;
 }
 
@@ -366,7 +366,7 @@ static void PrintTime(const char *s, UInt64 val, UInt64 total)
   *g_StdStream << '.';
   UInt32 ms = (UInt32)(val - (sec * kFreq)) / (kFreq / 1000);
   PrintNum(ms, 3, '0');
-  
+
   while (val > ((UInt64)1 << 56))
   {
     val >>= 1;
@@ -418,7 +418,7 @@ static void PrintStat()
   NTime::GetCurUtcFileTime(curTimeFT);
 
   #ifndef UNDER_CE
-  
+
   PROCESS_MEMORY_COUNTERS m;
   memset(&m, 0, sizeof(m));
   BOOL memDefined = FALSE;
@@ -453,22 +453,22 @@ static void PrintStat()
   UInt64 userTime = GetTime64(userTimeFT);
 
   UInt64 totalTime = curTime - creationTime;
-  
+
   PrintTime("Kernel ", kernelTime, totalTime);
   PrintTime("User   ", userTime, totalTime);
-  
+
   PrintTime("Process", kernelTime + userTime, totalTime);
   #ifndef UNDER_CE
   if (memDefined) PrintMemUsage("Virtual ", m.PeakPagefileUsage);
   #endif
-  
+
   PrintTime("Global ", totalTime, totalTime);
   #ifndef UNDER_CE
   if (memDefined) PrintMemUsage("Physical", m.PeakWorkingSetSize);
   #endif
-  
+
   *g_StdStream << endl;
-#endif // FIXME 
+#endif // FIXME
 }
 
 static void PrintHexId(CStdOutStream &so, UInt64 id)
@@ -489,12 +489,12 @@ int Main2(
   #endif
 
   UStringVector commandStrings;
-  
+
   #ifdef _WIN32
   NCommandLineParser::SplitCommandLine(GetCommandLineW(), commandStrings);
   #else
   // GetArguments(numArgs, args, commandStrings);
-  mySplitCommandLine(numArgs,args,commandStrings);  
+  mySplitCommandLine(numArgs,args,commandStrings);
   #endif
 
   if (commandStrings.Size() == 1)
@@ -521,7 +521,7 @@ int Main2(
   CStdOutStream *percentsStream = NULL;
   if (options.Number_for_Percents != k_OutStream_disabled)
     percentsStream = (options.Number_for_Percents == k_OutStream_stderr) ? &g_StdErr : &g_StdOut;;
-  
+
   if (options.HelpMode)
   {
     ShowCopyrightAndHelp(g_StdStream, true);
@@ -531,7 +531,7 @@ int Main2(
   #if defined(_WIN32) && !defined(UNDER_CE)
   NSecurity::EnablePrivilege_SymLink();
   #endif
-  
+
   #ifdef _7ZIP_LARGE_PAGES
   if (options.LargePages)
   {
@@ -557,19 +557,19 @@ int Main2(
   {
 /* FIXME
     #ifdef _WIN32
-    
+
     #if !defined(UNDER_CE)
     CONSOLE_SCREEN_BUFFER_INFO consoleInfo;
     if (GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &consoleInfo))
       consoleWidth = consoleInfo.dwSize.X;
     #endif
-    
+
     #else
-    
+
     struct winsize w;
     if (ioctl(0, TIOCGWINSZ, &w) == )
       consoleWidth = w.ws_col;
-    
+
     #endif
 */
   }
@@ -595,7 +595,7 @@ int Main2(
       throw s;
     }
     #endif
-    
+
     throw kNoFormats;
   }
 
@@ -614,7 +614,7 @@ int Main2(
     // excludedFormats.Sort();
   }
 
-  
+
   #ifdef EXTERNAL_CODECS
   if (isExtractGroupCommand
       || options.Command.CommandType == NCommandType::kHash
@@ -626,13 +626,13 @@ int Main2(
   HRESULT hresultMain = S_OK;
 
   // bool showStat = options.ShowTime;
-  
+
   /*
   if (!options.EnableHeaders ||
       options.TechMode)
     showStat = false;
   */
-  
+
 
   if (options.Command.CommandType == NCommandType::kInfo)
   {
@@ -649,10 +649,10 @@ int Main2(
     #endif
 
     so << endl << "Formats:" << endl;
-    
+
     const char *kArcFlags = "KSNFMGOPBELH";
     const unsigned kNumArcFlags = (unsigned)strlen(kArcFlags);
-    
+
     for (i = 0; i < codecs->Formats.Size(); i++)
     {
       const CArcInfoEx &arc = codecs->Formats[i];
@@ -664,18 +664,18 @@ int Main2(
       #endif
 
       so << (char)(arc.UpdateEnabled ? 'C' : ' ');
-      
+
       for (unsigned b = 0; b < kNumArcFlags; b++)
       {
         so << (char)
           ((arc.Flags & ((UInt32)1 << b)) != 0 ? kArcFlags[b] : ' ');
       }
-        
+
       so << ' ';
       PrintString(so, arc.Name, 8);
       so << ' ';
       UString s;
-      
+
       FOR_VECTOR (t, arc.Exts)
       {
         if (t != 0)
@@ -689,10 +689,10 @@ int Main2(
           s += L')';
         }
       }
-      
+
       PrintString(so, s, 13);
       so << ' ';
-      
+
       if (arc.SignatureOffset != 0)
         so << "offset=" << arc.SignatureOffset << ' ';
 
@@ -702,7 +702,7 @@ int Main2(
           so << "  ||  ";
 
         const CByteBuffer &sig = arc.Signatures[si];
-        
+
         for (size_t j = 0; j < sig.Size(); j++)
         {
           if (j != 0)
@@ -734,7 +734,7 @@ int Main2(
         so << ' ';
       else
         so << cod.NumStreams;
-      
+
       so << (char)(cod.CreateEncoder ? 'E' : ' ');
       so << (char)(cod.CreateDecoder ? 'D' : ' ');
 
@@ -757,7 +757,7 @@ int Main2(
         so << ' ';
       else
         so << numStreams;
-      
+
       so << (char)(codecs->GetCodec_EncoderIsAssigned(j) ? 'E' : ' ');
       so << (char)(codecs->GetCodec_DecoderIsAssigned(j) ? 'D' : ' ');
 
@@ -771,7 +771,7 @@ int Main2(
     }
 
     #endif
-    
+
 
     so << endl << "Hashers:" << endl; //  << " L Size       ID Name" << endl;
 
@@ -786,7 +786,7 @@ int Main2(
     }
 
     #ifdef EXTERNAL_CODECS
-    
+
     numMethods = codecs->GetNumHashers();
     for (UInt32 j = 0; j < numMethods; j++)
     {
@@ -798,7 +798,7 @@ int Main2(
     }
 
     #endif
-    
+
   }
   else if (options.Command.CommandType == NCommandType::kBenchmark)
   {
@@ -826,7 +826,7 @@ int Main2(
     else
     {
       CExtractScanConsole scan;
-      
+
       scan.Init(options.EnableHeaders ? g_StdStream : NULL, g_ErrStream, percentsStream);
       scan.SetWindowWidth(consoleWidth);
 
@@ -882,7 +882,7 @@ int Main2(
 
       ecs->LogLevel = options.LogLevel;
       ecs->PercentsNameLevel = percentsNameLevel;
-      
+
       if (percentsStream)
         ecs->SetWindowWidth(consoleWidth);
 
@@ -898,12 +898,12 @@ int Main2(
 
       CExtractOptions eo;
       (CExtractOptionsBase &)eo = options.ExtractOptions;
-      
+
       eo.StdInMode = options.StdInMode;
       eo.StdOutMode = options.StdOutMode;
       eo.YesToAll = options.YesToAll;
       eo.TestMode = options.Command.IsTestCommand();
-      
+
       #ifndef _SFX
       eo.Properties = options.Properties;
       #endif
@@ -919,7 +919,7 @@ int Main2(
         ThrowException_if_Error(hb.SetMethods(EXTERNAL_CODECS_VARS_L options.HashMethods));
         hb.Init();
       }
-      
+
       hresultMain = Extract(
           codecs,
           types,
@@ -928,7 +928,7 @@ int Main2(
           ArchivePathsFullSorted,
           options.Censor.Pairs.Front().Head,
           eo, ecs, ecs, hashCalc, errorMessage, stat);
-      
+
       ecs->ClosePercents();
 
       if (!errorMessage.IsEmpty())
@@ -946,7 +946,7 @@ int Main2(
       if (so)
       {
         *so << endl;
-        
+
         if (ecs->NumTryArcs > 1)
         {
           *so << "Archives: " << ecs->NumTryArcs << endl;
@@ -960,19 +960,19 @@ int Main2(
         if (so)
           *so << "Can't open as archive: " << ecs->NumCantOpenArcs << endl;
       }
-      
+
       if (ecs->NumArcsWithError != 0)
       {
         isError = true;
         if (so)
           *so << "Archives with Errors: " << ecs->NumArcsWithError << endl;
       }
-      
+
       if (so)
       {
         if (ecs->NumArcsWithWarnings != 0)
           *so << "Archives with Warnings: " << ecs->NumArcsWithWarnings << endl;
-        
+
         if (ecs->NumOpenArcWarnings != 0)
         {
           *so << endl;
@@ -980,7 +980,7 @@ int Main2(
             *so << "Warnings: " << ecs->NumOpenArcWarnings << endl;
         }
       }
-      
+
       if (ecs->NumOpenArcErrors != 0)
       {
         isError = true;
@@ -994,7 +994,7 @@ int Main2(
 
       if (isError)
         retCode = NExitCode::kFatalError;
-      
+
       if (so)
       if (ecs->NumArcsWithError != 0 || ecs->NumFileErrors != 0)
       {
@@ -1016,7 +1016,7 @@ int Main2(
           *so << "Alternate Streams: " << stat.NumAltStreams << endl;
           *so << "Alternate Streams Size: " << stat.AltStreams_UnpackSize << endl;
         }
-        
+
         *so
           << "Size:       " << stat.UnpackSize << endl
           << "Compressed: " << stat.PackSize << endl;
@@ -1031,7 +1031,7 @@ int Main2(
     {
       UInt64 numErrors = 0;
       UInt64 numWarnings = 0;
-      
+
       // options.ExtractNtOptions.StoreAltStreams = true, if -sns[-] is not definmed
 
       hresultMain = ListArchives(
@@ -1056,7 +1056,7 @@ int Main2(
       if (options.EnableHeaders)
         if (numWarnings > 0)
           g_StdOut << endl << "Warnings: " << numWarnings << endl;
-      
+
       if (numErrors > 0)
       {
         if (options.EnableHeaders)
@@ -1144,7 +1144,7 @@ int Main2(
     CHashCallbackConsole callback;
     if (percentsStream)
       callback.SetWindowWidth(consoleWidth);
-  
+
     callback.Init(g_StdStream, g_ErrStream, percentsStream);
     callback.PrintHeaders = options.EnableHeaders;
 
